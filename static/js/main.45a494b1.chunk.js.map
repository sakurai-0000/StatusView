{"version":3,"sources":["components/Rader.js","components/TextField.js","components/TextInput.js","App.js","serviceWorker.js","index.js"],"names":["Rader","props","state","chartData","redStatus","blueStatus","updateChartData","bind","this","setState","datasets","label","data","backgroundColor","className","options","title","display","displayTitle","text","fontsize","legend","displayLegend","position","legendPosition","Button","variant","color","onClick","Component","defaultProps","labels","useStyles","makeStyles","theme","root","margin","spacing","width","MultilineTextFields","classes","noValidate","autoComplete","map","TextField","id","multiline","rowsMax","onChange","event","target","value","console","log","setTextField","TextInput","inputRef","React","createRef","pointData","pointStatus","textField","setRedStatus","setBlueStatus","getChartData","values","redStatus_copy","slice","blueStatus_copy","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45a494b1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Radar } from 'react-chartjs-2';\nimport {Button} from '@material-ui/core';\n\nclass Rader extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      chartData:this.props.chartData,\n      redStatus:this.props.redStatus,\n      blueStatus:this.props.blueStatus\n    }\n    this.updateChartData = this.updateChartData.bind(this);\n  }\n\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend:true,\n    // legendPosition:'right',\n    // location:'City',\n    labels:['Manegement', 'Communication', 'Technique', 'Intelligence', 'Development', 'Humor']\n  }\n\n  updateChartData(){\n      this.setState({\n        chartData:{\n          datasets:[\n            {\n              label:'Current Status',\n              data:this.props.redStatus,\n              backgroundColor:[\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n              ]\n            },\n            {\n              label:'Required Status',\n              data:this.props.blueStatus,\n              backgroundColor:[\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n              ]\n            }\n          ]\n        }\n      });\n  }\n\n  render(){\n    return(\n      <div className=\"chart\">\n        <Radar\n          data={this.state.chartData}\n          options={{\n            title:{\n              display:this.props.displayTitle,\n              text:'Currenr and Required Status Rader',\n              fontsize:100\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            }\n          }}\n          //maintainAspectRatio: サイズ変更の際に、元のキャンパスのアスペクト比を維持する\n        />\n      <Button\n          variant=\"contained\" color=\"inherit\"\n          onClick={this.updateChartData}>\n          update\n        </Button>\n    </div>\n    )\n  }\n}\n\nexport default Rader; //他のファイルでimportしてもいいという宣言？\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(2),\n      width: 100\n    }\n  }\n}));\n\nexport default function MultilineTextFields(props) {\n  const classes = useStyles();\n\n  const onChange = (label, event) =>{\n    props[\"textField\"][label] = event.target.value;\n    console.log(props);\n    props.setTextField(props[\"textField\"]);\n  }\n\n  const labels = ['Management', 'Communication', 'Technique', 'Intelligence', 'Development', 'Humor'];\n\n  return (\n    <form className={classes.root} noValidate autoComplete=\"off\">\n\n      {labels.map( (label) =>\n        <TextField\n          id=\"standard-basic\"\n          label={label}\n          multiline\n          rowsMax=\"4\"\n          onChange={(event) => onChange(label,event)}\n        />\n      )}\n    </form>\n  );\n}\n","\nimport React, {Component} from 'react';\nimport {Button} from '@material-ui/core';\n//import { makeStyles } from '@material-ui/core/styles';\n//import TextField from '@material-ui/core/TextField';\nimport Rader from './Rader';\n//import Point from './Point';\nimport TextField from './TextField';\n\nclass TextInput extends Component {\n  constructor(props){\n    super(props)\n    this.inputRef = React.createRef();\n    this.state = {\n     chartData:{},\n     redStatus:[],\n     blueStatus:[],\n     pointData:{},\n     pointStatus:[],\n     textField:{}\n    }\n    this.setRedStatus = this.setRedStatus.bind(this);\n    this.setBlueStatus = this.setBlueStatus.bind(this);\n    this.setTextField = this.setTextField.bind(this);\n  }\n\n  componentWillMount(){\n    this.getChartData();\n    //this.getPointData();\n  }\n\n  setTextField(values){\n    this.setState({\n      textField:values\n    })\n  }\n\n  getChartData(){\n    //Ajax calls here\n      this.setState({\n        chartData:{\n          labels:['Manegement', 'Communication', 'Technique', 'Intelligence', 'Development', 'Humor'],\n          datasets:[\n            {\n              label:'Current status',\n              data:this.state.redStatus,\n              backgroundColor:[\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n              ]\n            },\n            {\n              label:'Required status',\n              data:[],\n              backgroundColor:[\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n              ]\n            }\n          ]\n        }\n      });\n  }\n\n  // getPointData(){\n  //   //Ajax calls here\n  //     this.setState({\n  //       pointData:{\n  //         labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  //         datasets: [\n  //           {\n  //             label: 'Monthly trends',\n  //             fill: false,\n  //             lineTension: 0.1,\n  //             backgroundColor: 'rgba(75,192,192,0.4)',\n  //             borderColor: 'rgba(75,192,192,1)',\n  //             borderCapStyle: 'round',\n  //             borderDash: [],\n  //             borderDashOffset: 0.0,\n  //             borderJoinStyle: 'square',\n  //             pointBorderColor: 'rgba(75,192,192,1)',\n  //             pointBackgroundColor: '#eee',\n  //             pointBorderWidth: 10,\n  //             pointHoverRadius: 5,\n  //             pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n  //             pointHoverBorderColor: 'rgba(220,220,220,1)',\n  //             pointHoverBorderWidth: 1,\n  //             pointRadius: 1,\n  //             pointHitRadius: 10,\n  //             data: []\n  //         }\n  //       ]\n  //     }\n  //   });\n  // }\n\n  setRedStatus(){\n    const redStatus_copy = this.state.redStatus.slice();\n    // redStatus_copy[0] = this.refs.red1.value;\n    // redStatus_copy[1] = this.refs.red2.value;\n    // redStatus_copy[2] = this.refs.red3.value;\n    // redStatus_copy[3] = this.refs.red4.value;\n    // redStatus_copy[4] = this.refs.red5.value;\n    // redStatus_copy[5] = this.refs.red6.value;\n    redStatus_copy[0] = this.state.textField[\"Management\"];\n    redStatus_copy[1] = this.state.textField[\"Communication\"];\n    redStatus_copy[2] = this.state.textField[\"Technique\"];\n    redStatus_copy[3] = this.state.textField[\"Intelligence\"];\n    redStatus_copy[4] = this.state.textField[\"Development\"];\n    redStatus_copy[5] = this.state.textField[\"Humor\"];\n    this.setState({\n      redStatus: redStatus_copy\n    });\n    this.getChartData();\n\n    // this.setState({\n    //   pointData:{datasets:[{data:redStatus_copy}]}\n    // });\n  }\n\n  setBlueStatus(){\n    const blueStatus_copy = this.state.blueStatus.slice();\n    // blueStatus_copy[0] = this.refs.blue1.value;\n    // blueStatus_copy[1] = this.refs.blue2.value;\n    // blueStatus_copy[2] = this.refs.blue3.value;\n    // blueStatus_copy[3] = this.refs.blue4.value;\n    // blueStatus_copy[4] = this.refs.blue5.value;\n    // blueStatus_copy[5] = this.refs.blue6.value;\n    blueStatus_copy[0] = this.state.textField[\"Management\"];\n    blueStatus_copy[1] = this.state.textField[\"Communication\"];\n    blueStatus_copy[2] = this.state.textField[\"Technique\"];\n    blueStatus_copy[3] = this.state.textField[\"Intelligence\"];\n    blueStatus_copy[4] = this.state.textField[\"Development\"];\n    blueStatus_copy[5] = this.state.textField[\"Humor\"];\n    this.setState({\n      blueStatus: blueStatus_copy\n    });\n  }\n\n  //同一コンポーネント内でDOM操作を行いたい時にはRef属性を使う\n  //非推奨（場合によりけり）\n  render(){\n\n    return(\n      <div>\n        <div>\n          <p>Current</p>\n          {/*<input type='number' min=\"0\" ref={'red1'}/>\n          <input type='number' min=\"0\" ref={'red2'}/>\n          <input type='number' min=\"0\" ref={'red3'}/>\n          <input type='number' min=\"0\" ref={'red4'}/>\n          <input type='number' min=\"0\" ref={'red5'}/>\n          <input type='number' min=\"0\" ref={'red6'}/>*/}\n          <TextField setTextField={this.setTextField} textField={this.state.textField}/>\n          <Button variant=\"contained\" color=\"secondary\" onClick={() => this.setRedStatus()}>Red Input</Button>\n        </div>\n        <div>\n          <p>Required</p>\n          {/*}<input type='number' min=\"0\" ref={'blue1'}/>\n          <input type='number' min=\"0\" ref={'blue2'}/>\n          <input type='number' min=\"0\" ref={'blue3'}/>\n          <input type='number' min=\"0\" ref={'blue4'}/>\n          <input type='number' min=\"0\" ref={'blue5'}/>\n          <input type='number' min=\"0\" ref={'blue6'}/>*/}\n          <TextField setTextField={this.setTextField} textField={this.state.textField}/>\n          <Button  variant=\"contained\" color=\"primary\" onClick={() => this.setBlueStatus()}>Blue Input</Button>\n        </div>\n        <Rader chartData={this.state.chartData} redStatus={this.state.redStatus} blueStatus={this.state.blueStatus}\n        legendPosition=\"bottom\"/>\n      {/*<Point pointData={this.state.pointData} />*/}\n      </div>\n    )\n  }\n}\n\nexport default TextInput\n","import React, { Component } from 'react';\nimport './App.css';\nimport TextInput from './components/TextInput';\n\nclass App extends Component {\n\n  // constructor(props){\n  //     super(props);\n  // }\n\n  render(){\n    return (\n      <div>\n        <div className=\"App\">\n          <TextInput />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}