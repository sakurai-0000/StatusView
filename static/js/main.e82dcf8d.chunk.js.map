{"version":3,"sources":["components/Rader.js","components/Point.js","components/TextInput.js","App.js","serviceWorker.js","index.js"],"names":["Rader","props","state","chartData","redStatus","blueStatus","updateChartData","bind","this","setState","datasets","label","data","className","options","title","display","displayTitle","text","fontsize","legend","displayLegend","position","legendPosition","onClick","Component","defaultProps","location","labels","Point","pointData","updatePointData","TextInput","inputRef","React","createRef","pointStatus","setRedStatus","setBlueStatus","getChartData","getPointData","backgroundColor","fill","lineTension","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","redStatus_copy","slice","refs","red1","value","red2","red3","red4","red5","red6","blueStatus_copy","blue1","blue2","blue3","blue4","blue5","blue6","console","log","type","min","ref","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0NAGMA,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACXC,UAAU,EAAKF,MAAME,UACrBC,UAAU,EAAKH,MAAMG,UACrBC,WAAW,EAAKJ,MAAMI,YAExB,EAAKC,gBAAkB,EAAKA,gBAAgBC,KAArB,gBAPP,E,+EAmBdC,KAAKC,SAAS,CACZN,UAAU,CACRO,SAAS,CACP,CACEC,MAAM,iBACNC,KAAKJ,KAAKP,MAAMG,WAElB,CACEO,MAAM,kBACNC,KAAKJ,KAAKP,MAAMI,kB,+BAQ1B,OACE,yBAAKQ,UAAU,SACb,kBAAC,IAAD,CACED,KAAMJ,KAAKN,MAAMC,UACjBW,QAAS,CACPC,MAAM,CACJC,QAAQR,KAAKP,MAAMgB,aACnBC,KAAK,oCACLC,SAAS,KAEXC,OAAO,CACLJ,QAAQR,KAAKP,MAAMoB,cACnBC,SAASd,KAAKP,MAAMsB,mBAK1B,4BAAQC,QAAShB,KAAKF,iBAAtB,e,GAtDYmB,aAAdzB,EAWG0B,aAAe,CACpBT,cAAa,EACbI,eAAc,EACdE,eAAe,QACfI,SAAS,OACTC,OAAO,CAAC,aAAc,gBAAiB,YAAa,eAAgB,cAAe,UA8CxE5B,QCpCA6B,E,YAzBb,WAAY5B,GAAO,IAAD,8BACd,4CAAMA,KACDC,MAAQ,CACX4B,UAAU,EAAK7B,MAAM6B,WAErB,EAAKC,gBAAkB,EAAKA,gBAAgBxB,KAArB,gBALX,E,+EASdC,KAAKC,SAAS,CACZqB,UAAWtB,KAAKP,MAAM6B,c,+BAK1B,OACE,6BACE,kBAAC,IAAD,CAAMlB,KAAMJ,KAAKN,MAAM4B,YACvB,4BAAQN,QAAShB,KAAKuB,iBAAtB,e,GAnBYN,aC0JLO,E,YAxJb,WAAY/B,GAAO,IAAD,8BAChB,4CAAMA,KACDgC,SAAWC,IAAMC,YACtB,EAAKjC,MAAQ,CACZC,UAAU,GACVC,UAAU,GACVC,WAAW,GACXyB,UAAU,GACVM,YAAY,IAEb,EAAKC,aAAe,EAAKA,aAAa9B,KAAlB,gBACpB,EAAK+B,cAAgB,EAAKA,cAAc/B,KAAnB,gBAXL,E,kFAehBC,KAAK+B,eACL/B,KAAKgC,iB,qCAKHhC,KAAKC,SAAS,CACZN,UAAU,CACRyB,OAAO,CAAC,aAAc,gBAAiB,YAAa,eAAgB,cAAe,SACnFlB,SAAS,CACP,CACEC,MAAM,iBACNC,KAAK,GACL6B,gBAAgB,CACd,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,yBAGJ,CACE9B,MAAM,kBACNC,KAAK,GACL6B,gBAAgB,CACd,uBACA,uBACA,uBACA,uBACA,uBACA,uBACA,+B,qCAUVjC,KAAKC,SAAS,CACZqB,UAAU,CACRF,OAAQ,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,QACjElB,SAAU,CACR,CACEC,MAAO,iBACP+B,MAAM,EACNC,YAAa,GACbF,gBAAiB,uBACjBG,YAAa,qBACbC,eAAgB,QAChBC,WAAY,GACZC,iBAAkB,EAClBC,gBAAiB,SACjBC,iBAAkB,qBAClBC,qBAAsB,OACtBC,iBAAkB,GAClBC,iBAAkB,EAClBC,0BAA2B,qBAC3BC,sBAAuB,sBACvBC,sBAAuB,EACvBC,YAAa,EACbC,eAAgB,GAChB7C,KAAM,U,qCAQhB,IAAM8C,EAAiBlD,KAAKN,MAAME,UAAUuD,QAC5CD,EAAe,GAAKlD,KAAKoD,KAAKC,KAAKC,MACnCJ,EAAe,GAAKlD,KAAKoD,KAAKG,KAAKD,MACnCJ,EAAe,GAAKlD,KAAKoD,KAAKI,KAAKF,MACnCJ,EAAe,GAAKlD,KAAKoD,KAAKK,KAAKH,MACnCJ,EAAe,GAAKlD,KAAKoD,KAAKM,KAAKJ,MACnCJ,EAAe,GAAKlD,KAAKoD,KAAKO,KAAKL,MACnCtD,KAAKC,SAAS,CACZL,UAAWsD,IAGblD,KAAKC,SAAS,CACZqB,UAAU,CAACpB,SAAS,CAAC,CAACE,KAAK8C,S,sCAK7B,IAAMU,EAAkB5D,KAAKN,MAAMG,WAAWsD,QAC9CS,EAAgB,GAAK5D,KAAKoD,KAAKS,MAAMP,MACrCM,EAAgB,GAAK5D,KAAKoD,KAAKU,MAAMR,MACrCM,EAAgB,GAAK5D,KAAKoD,KAAKW,MAAMT,MACrCM,EAAgB,GAAK5D,KAAKoD,KAAKY,MAAMV,MACrCM,EAAgB,GAAK5D,KAAKoD,KAAKa,MAAMX,MACrCM,EAAgB,GAAK5D,KAAKoD,KAAKc,MAAMZ,MACrCtD,KAAKC,SAAS,CACZJ,WAAY+D,IAEZO,QAAQC,IAAIpE,KAAKN,MAAMG,c,+BAKlB,IAAD,OACN,OACE,6BACE,6BACE,sCACA,2BAAOwE,KAAK,SAASC,IAAI,IAAIC,IAAK,SAClC,2BAAOF,KAAK,SAASC,IAAI,IAAIC,IAAK,SAClC,2BAAOF,KAAK,SAASC,IAAI,IAAIC,IAAK,SAClC,2BAAOF,KAAK,SAASC,IAAI,IAAIC,IAAK,SAClC,2BAAOF,KAAK,SAASC,IAAI,IAAIC,IAAK,SAClC,2BAAOF,KAAK,SAASC,IAAI,IAAIC,IAAK,SAClC,4BAAQvD,QAAS,kBAAM,EAAKa,iBAA5B,cAEF,6BACE,uCACA,2BAAOwC,KAAK,SAASC,IAAI,IAAIC,IAAK,UAClC,2BAAOF,KAAK,SAASC,IAAI,IAAIC,IAAK,UAClC,2BAAOF,KAAK,SAASC,IAAI,IAAIC,IAAK,UAClC,2BAAOF,KAAK,SAASC,IAAI,IAAIC,IAAK,UAClC,2BAAOF,KAAK,SAASC,IAAI,IAAIC,IAAK,UAClC,2BAAOF,KAAK,SAASC,IAAI,IAAIC,IAAK,UAClC,4BAAQvD,QAAS,kBAAM,EAAKc,kBAA5B,eAEF,kBAAC,EAAD,CAAOnC,UAAWK,KAAKN,MAAMC,UAAWC,UAAWI,KAAKN,MAAME,UAAWC,WAAYG,KAAKN,MAAMG,WAChGkB,eAAe,WACf,kBAAC,EAAD,CAAOO,UAAWtB,KAAKN,MAAM4B,iB,GAnJbL,aCiBTuD,E,iLAVX,OACE,6BACE,yBAAKnE,UAAU,OACb,kBAAC,EAAD,Y,GAVQY,aCQEwD,QACW,cAA7BC,OAAOvD,SAASwD,UAEe,UAA7BD,OAAOvD,SAASwD,UAEhBD,OAAOvD,SAASwD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e82dcf8d.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport { Radar } from 'react-chartjs-2';\n\nclass Rader extends Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      chartData:this.props.chartData,\n      redStatus:this.props.redStatus,\n      blueStatus:this.props.blueStatus\n    }\n    this.updateChartData = this.updateChartData.bind(this);\n  }\n\n  static defaultProps = {\n    displayTitle:true,\n    displayLegend:true,\n    legendPosition:'right',\n    location:'City',\n    labels:['Manegement', 'Communication', 'Technique', 'Intelligence', 'Development', 'Humor']\n  }\n\n  updateChartData(){\n      this.setState({\n        chartData:{\n          datasets:[\n            {\n              label:'current Status',\n              data:this.props.redStatus\n            },\n            {\n              label:'Required Status',\n              data:this.props.blueStatus\n            }\n          ]\n        }\n      });\n  }\n\n  render(){\n    return(\n      <div className=\"chart\">\n        <Radar\n          data={this.state.chartData}\n          options={{\n            title:{\n              display:this.props.displayTitle,\n              text:'Currenr and Required Status Rader',\n              fontsize:100\n            },\n            legend:{\n              display:this.props.displayLegend,\n              position:this.props.legendPosition\n            }\n          }}\n          //maintainAspectRatio: サイズ変更の際に、元のキャンパスのアスペクト比を維持する\n        />\n        <button onClick={this.updateChartData}>\n          update\n        </button>\n    </div>\n    )\n  }\n}\n\nexport default Rader; //他のファイルでimportしてもいいという宣言？\n","import React, {Component} from 'react';\nimport { Line } from 'react-chartjs-2';\n\nclass Point extends Component {\n  constructor(props){\n      super(props);\n      this.state = {\n        pointData:this.props.pointData\n      }\n        this.updatePointData = this.updatePointData.bind(this);\n  }\n\n  updatePointData(){\n      this.setState({\n        pointData: this.props.pointData\n      })\n  }\n\n  render(){\n    return(\n      <div>\n        <Line data={this.state.pointData}/>\n        <button onClick={this.updatePointData}>update</button>\n      </div>\n\n    )\n  }\n}\n\nexport default Point;\n","import React, {Component} from 'react';\nimport Rader from './Rader';\nimport Point from './Point';\n\nclass TextInput extends Component {\n  constructor(props){\n    super(props)\n    this.inputRef = React.createRef();\n    this.state = {\n     chartData:{},\n     redStatus:[],\n     blueStatus:[],\n     pointData:{},\n     pointStatus:[]\n    }\n    this.setRedStatus = this.setRedStatus.bind(this);\n    this.setBlueStatus = this.setBlueStatus.bind(this);\n  }\n\n  componentWillMount(){\n    this.getChartData();\n    this.getPointData();\n  }\n\n  getChartData(){\n    //Ajax calls here\n      this.setState({\n        chartData:{\n          labels:['Manegement', 'Communication', 'Technique', 'Intelligence', 'Development', 'Humor'],\n          datasets:[\n            {\n              label:'current status',\n              data:[],\n              backgroundColor:[\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n                'rgba(255,99,132,0.6)',\n              ]\n            },\n            {\n              label:'required status',\n              data:[],\n              backgroundColor:[\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n                'rgba(54,162,235,0.6)',\n              ]\n            }\n          ]\n        }\n      });\n  }\n\n  getPointData(){\n    //Ajax calls here\n      this.setState({\n        pointData:{\n          labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n          datasets: [\n            {\n              label: 'Monthly trends',\n              fill: false,\n              lineTension: 0.1,\n              backgroundColor: 'rgba(75,192,192,0.4)',\n              borderColor: 'rgba(75,192,192,1)',\n              borderCapStyle: 'round',\n              borderDash: [],\n              borderDashOffset: 0.0,\n              borderJoinStyle: 'square',\n              pointBorderColor: 'rgba(75,192,192,1)',\n              pointBackgroundColor: '#eee',\n              pointBorderWidth: 10,\n              pointHoverRadius: 5,\n              pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n              pointHoverBorderColor: 'rgba(220,220,220,1)',\n              pointHoverBorderWidth: 1,\n              pointRadius: 1,\n              pointHitRadius: 10,\n              data: []\n          }\n        ]\n      }\n    });\n  }\n\n  setRedStatus(){\n    const redStatus_copy = this.state.redStatus.slice();\n    redStatus_copy[0] = this.refs.red1.value;\n    redStatus_copy[1] = this.refs.red2.value;\n    redStatus_copy[2] = this.refs.red3.value;\n    redStatus_copy[3] = this.refs.red4.value;\n    redStatus_copy[4] = this.refs.red5.value;\n    redStatus_copy[5] = this.refs.red6.value;\n    this.setState({\n      redStatus: redStatus_copy\n    });\n\n    this.setState({\n      pointData:{datasets:[{data:redStatus_copy}]}\n    });\n  }\n\n  setBlueStatus(){\n    const blueStatus_copy = this.state.blueStatus.slice();\n    blueStatus_copy[0] = this.refs.blue1.value;\n    blueStatus_copy[1] = this.refs.blue2.value;\n    blueStatus_copy[2] = this.refs.blue3.value;\n    blueStatus_copy[3] = this.refs.blue4.value;\n    blueStatus_copy[4] = this.refs.blue5.value;\n    blueStatus_copy[5] = this.refs.blue6.value;\n    this.setState({\n      blueStatus: blueStatus_copy\n    });\n      console.log(this.state.blueStatus);\n  }\n\n  //同一コンポーネント内でDOM操作を行いたい時にはRef属性を使う\n  //非推奨（場合によりけり）\n  render(){\n    return(\n      <div>\n        <div>\n          <p>Current</p>\n          <input type='number' min=\"0\" ref={'red1'}/>\n          <input type='number' min=\"0\" ref={'red2'}/>\n          <input type='number' min=\"0\" ref={'red3'}/>\n          <input type='number' min=\"0\" ref={'red4'}/>\n          <input type='number' min=\"0\" ref={'red5'}/>\n          <input type='number' min=\"0\" ref={'red6'}/>\n          <button onClick={() => this.setRedStatus()}>Red Input</button>\n        </div>\n        <div>\n          <p>Required</p>\n          <input type='number' min=\"0\" ref={'blue1'}/>\n          <input type='number' min=\"0\" ref={'blue2'}/>\n          <input type='number' min=\"0\" ref={'blue3'}/>\n          <input type='number' min=\"0\" ref={'blue4'}/>\n          <input type='number' min=\"0\" ref={'blue5'}/>\n          <input type='number' min=\"0\" ref={'blue6'}/>\n          <button onClick={() => this.setBlueStatus()}>Blue Input</button>\n        </div>\n        <Rader chartData={this.state.chartData} redStatus={this.state.redStatus} blueStatus={this.state.blueStatus}\n        legendPosition=\"bottom\"/>\n        <Point pointData={this.state.pointData} />\n      </div>\n    )\n  }\n}\n\nexport default TextInput\n","import React, { Component } from 'react';\nimport './App.css';\nimport TextInput from './components/TextInput';\n\nclass App extends Component {\n\n  // constructor(props){\n  //     super(props);\n  // }\n\n  render(){\n    return (\n      <div>\n        <div className=\"App\">\n          <TextInput />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}